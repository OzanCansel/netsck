.TH netsck 7 2021-12-25 "API" "Javascript API Manual"

.SH NAME
.B netsck
\- network utility tool

.SH DESCRIPTION
.BR netsck
is a network utility tool which enables to prototype or test network things.
It provides a shell inside which runs a javascript engine.
This manual will present the
.I netsck_Javascript_API
inside the shell.
.PP
.PP
Note that, shell supports multiline input with trailing escape '\\' character.

.SH ENGINE
Uses
.I QJSEngine
class to evaluate javascript codes
so anything which QJSEngine supports available to the user.

.SH METHODS

.TP
.B help( topic : string = "base-api" )
Opens the man page according to the topic.
If topic isn't given then opens this man page.

.TP
.B run( file_path : string ) -> int
Executes the lines inside the file.
Returns non-zero if any error occurred, otherwise 0.

.TP
.B std_out( obj : any )
Prints the 'obj' to stdout without newline.

.TP
.B dump( object : any )
Prints the content of any object to the stdout.

.TP
.B sleep( duration : int )
Sleeps current thread for specified duration.
Unit is milliseconds.

.TP
.B now() -> double
Returns
.B std::chrono::steady_clock::now().time_since_epoch()
with milliseconds unit.
Return type is double, but this is just because of allowing for the return value to hold larger values.
Return value does not have fractional part.

.TP
.B wait_key( timeout : int )
Waits for user to input a key and returns the value.
Key value is the value returned from
.B std::getchar().
If timeout expires function returns -1.
Unit of timeout is milliseconds.
Note that if timeout is -1 it works like there is no timeout.

.TP
.B read_line() -> string
Reads line from stdin and returns as string

.TP
.B array( data : QByteArray ) -> Array
Converts QByteArray to javascript array.

.TP
.B flat( data : Array ) -> QByteArray
Converts a javascript array to QByteArray.
Array should contain either numbers, bools, or characters.
Numbers should be between 0-255.

.TP
.B beint16( num : short ) -> Array
Converts a short to 2 bytes representation over javascript array.
If host system is little endian, bytes are reversed.

.TP
.B beint32( num : int ) -> Array
Converts an integer to 4 bytes representation over javascript array.
If host system is little endian, bytes are reversed.

.TP
.B beint64( num : double ) -> Array
Converts an double to quint64 and to 8 bytes representation over javascript array.
If host system is little endian, bytes are reversed.
.br
Note that, double represents maximum 53 bits resolution for integers,
so if you have bigger number they probably be truncated.

.TP
.B befloat( num : float ) -> Array
Converts a float to 4 bytes representation over javascript array.
If host system is little endian, bytes are reversed.

.TP
.B bedouble( num : double ) -> Array
Converts a double to 4 bytes representation over javascript array.
If host system is little endian, bytes are reversed.

.TP
.B leint16( num : short ) -> Array
Converts a short to 2 bytes representation over javascript array.
If host system is big endian, bytes are reversed.

.TP
.B leint32( num : int ) -> Array
Converts an integer to 4 bytes representation over javascript array.
If host system is big endian, bytes are reversed.

.TP
.B leint64( num : double ) -> Array
Converts an double to quint64 and to 8 bytes representation over javascript array.
If host system is big endian, bytes are reversed.
.br
Note that, double represents maximum 53 bits resolution for integers,
so if you have bigger number they probably be truncated.

.TP
.B lefloat( num : float ) -> Array
Converts a float to 4 bytes representation over javascript array.
If host system is big endian, bytes are reversed.

.TP
.B ledouble( num : double ) -> Array
Converts a double to 4 bytes representation over javascript array.
If host system is big endian, bytes are reversed.

.SH CLASSES
Detailed class documentations can be found through 
.B help()
with their class names.

.br
For example, help( "udp_socket" ).

.PP
\- PascalCase naming means the class is
.B singleton.
.PP
\- snake_case naming means the class is
.B instantiable.

.TP
.B socket
.br
Base class which provides an abstract base for socket classes.

.TP
.B udp_socket
Socket class which enables to send or receive udp datagrams.

.TP
.B Hex
.br
Singleton hexadecimal utility class which prints QByteArray
as hexadecimal or creates a QByteArray from hexadecimal string.

.SH EXAMPLE

// Create a 'send.js' and write some js code in it to make it worked
.br
run( "send.js" );

.br
var an_object = { \\
    user : "Ozan" , \\
    repo : "netsck" \\
.br
};
.br
dump( an_object )

.SH SEE ALSO
.B socket
(7)
,
.B udp_socket
(7)
,
.B Hex
(7)

.SH SEE ALSO (JS Shell)
.B help("socket")
,
.B help("udp_socket")
,
.B help("Hex")